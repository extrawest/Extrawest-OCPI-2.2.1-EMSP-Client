Subject: [PATCH] torun
---
Index: src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityChain.java
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityChain.java b/src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityChain.java
deleted file mode 100644
--- a/src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityChain.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ /dev/null	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
@@ -1,58 +0,0 @@
-package com.extrawest.ocpi221emsp_client.security.config;
-
-import com.extrawest.ocpi221emsp_client.security.filter.JwtAuthenticationFilter;
-import jakarta.servlet.http.HttpServletResponse;
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.authentication.AuthenticationProvider;
-import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.config.http.SessionCreationPolicy;
-import org.springframework.security.web.SecurityFilterChain;
-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
-
-@Configuration
-@EnableWebSecurity
-@RequiredArgsConstructor
-@EnableMethodSecurity
-public class SecurityChain {
-    private final JwtAuthenticationFilter jwtAuthenticationFilter;
-    private final AuthenticationProvider authenticationProvider;
-
-    @Bean
-    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
-        return httpSecurity
-                .csrf()
-                .disable()
-                .authorizeHttpRequests()
-                .requestMatchers("/admin-panel", "/swagger-ui").permitAll()
-                .requestMatchers("/emsp/api/versions").permitAll()
-                .requestMatchers("/emsp/api/versions/details**").permitAll()
-                .requestMatchers("/emsp/api/2.2.1/credentials").permitAll()
-                .requestMatchers("/emsp/api/**").hasRole("CPO")
-                .anyRequest().authenticated()
-                .and()
-                .httpBasic().disable()
-                .sessionManagement()
-                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
-                .and()
-                .authenticationProvider(authenticationProvider)
-                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)
-                .exceptionHandling()
-                .authenticationEntryPoint(
-                        (request, response, ex) -> response.sendError(
-                                HttpServletResponse.SC_UNAUTHORIZED,
-                                ex.getMessage()
-                        )
-                )
-                .accessDeniedHandler((request, response, ex) -> response.sendError(
-                        HttpServletResponse.SC_FORBIDDEN,
-                        ex.getMessage()
-                ))
-                .and()
-                .build();
-    }
-
-}
Index: src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityConfig.java
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityConfig.java b/src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityConfig.java
deleted file mode 100644
--- a/src/main/java/com/extrawest/ocpi221emsp_client/security/config/SecurityConfig.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ /dev/null	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
@@ -1,42 +0,0 @@
-package com.extrawest.ocpi221emsp_client.security.config;
-
-import com.extrawest.ocpi221emsp_client.service.admin.RegisteredPartyService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.authentication.AuthenticationProvider;
-import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
-import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
-import org.springframework.security.core.userdetails.UserDetailsService;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.security.crypto.password.PasswordEncoder;
-
-@Configuration
-@RequiredArgsConstructor
-public class SecurityConfig {
-    private final RegisteredPartyService registeredPartyService;
-
-    @Bean
-    public UserDetailsService userDetailsService() {
-        return registeredPartyService::findById;
-    }
-
-    @Bean
-    public AuthenticationProvider authenticationProvider() {
-        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
-        authProvider.setUserDetailsService(userDetailsService());
-        authProvider.setPasswordEncoder(passwordEncoder());
-        return authProvider;
-    }
-
-    @Bean
-    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
-        return config.getAuthenticationManager();
-    }
-
-    @Bean
-    public PasswordEncoder passwordEncoder() {
-        return new BCryptPasswordEncoder();
-    }
-}
Index: src/main/java/com/extrawest/ocpi221emsp_client/security/filter/JwtAuthenticationFilter.java
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/security/filter/JwtAuthenticationFilter.java b/src/main/java/com/extrawest/ocpi221emsp_client/security/filter/JwtAuthenticationFilter.java
deleted file mode 100644
--- a/src/main/java/com/extrawest/ocpi221emsp_client/security/filter/JwtAuthenticationFilter.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ /dev/null	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
@@ -1,144 +0,0 @@
-package com.extrawest.ocpi221emsp_client.security.filter;
-
-import com.extrawest.ocpi.exception.OcpiResourceNotFoundException;
-import com.extrawest.ocpi.model.dto.VersionDetails;
-import com.extrawest.ocpi.model.enums.ModuleID;
-import com.extrawest.ocpi.model.enums.VersionNumber;
-import com.extrawest.ocpi.service.EMSPVersionService;
-import com.extrawest.ocpi221emsp_client.config.PartyConfig;
-import com.extrawest.ocpi221emsp_client.security.service.JwtService;
-import com.extrawest.ocpi221emsp_client.security.service.TokenService;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import jakarta.servlet.FilterChain;
-import jakarta.servlet.ServletException;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.servlet.http.HttpServletResponse;
-import jakarta.ws.rs.ForbiddenException;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.security.core.userdetails.UserDetails;
-import org.springframework.security.core.userdetails.UserDetailsService;
-import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
-import org.springframework.stereotype.Component;
-import org.springframework.util.MimeTypeUtils;
-import org.springframework.util.StringUtils;
-import org.springframework.web.filter.OncePerRequestFilter;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
-
-@Component
-@RequiredArgsConstructor
-public class JwtAuthenticationFilter extends OncePerRequestFilter {
-    private final JwtService jwtService;
-    private final TokenService tokenService;
-    private final UserDetailsService userDetailsService;
-
-    private final EMSPVersionService versionService;
-    private final PartyConfig partyConfig;
-
-    @Override
-    protected void doFilterInternal(@NonNull HttpServletRequest request,
-                                    @NonNull HttpServletResponse response,
-                                    @NonNull FilterChain filterChain) throws ServletException, IOException {
-
-        if (isAdminPanel(request)) {
-            filterChain.doFilter(request, response);
-            return;
-        }
-
-        try {
-            String authHeader = request.getHeader("Authorization");
-            if (authHeader == null || !authHeader.startsWith("Token ")) {
-//                throw new ForbiddenException("Header has no token");
-                filterChain.doFilter(request, response);
-                return;
-            }
-
-            String jwt = extractJwtToken(authHeader);
-
-            //token A
-            if (tokenService.isValidTokenA(jwt)) {
-                if (!isVersionsRequest(request) && !isCredentialsRequest(request)) {
-                    throw new ForbiddenException(String.format("Token A can not be used for %s", request.getServletPath()));
-                }
-                filterChain.doFilter(request, response);
-                if (!isVersionsRequest(request) && isCredentialsRequest(request)) {
-                    tokenService.invalidate(jwt);
-                }
-                return;
-            }
-
-            //token B
-            if (!tokenService.isRegisteredB(jwt)) {
-                throw new ForbiddenException(String.format("Token can not be used for %s", request.getServletPath()));
-            }
-
-            if (!isVersionsRequest(request) && isCredentialsRequest(request)) {
-                throw new ForbiddenException("Already registered");
-            }
-
-            String uuid = jwtService.extractId(jwt);
-            if (StringUtils.hasText(uuid) && SecurityContextHolder.getContext().getAuthentication() == null) {
-
-                boolean isValid = tokenService.isRegisteredB(jwt);
-                if (!isValid) {
-                    throw new ForbiddenException(String.format("Token can not be used for %s", request.getServletPath()));
-                }
-
-                UserDetails userDetails = this.userDetailsService.loadUserByUsername(uuid);
-
-                UsernamePasswordAuthenticationToken authToken =
-                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
-                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
-                SecurityContextHolder.getContext().setAuthentication(authToken);
-
-                // Set the authentication in the SecurityContext
-                SecurityContextHolder.getContext().setAuthentication(authToken);
-            }
-            filterChain.doFilter(request, response);
-
-        } catch (Exception e) {
-            response.setHeader("error", e.getMessage());
-            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
-            Map<String, String> error = new HashMap<>();
-            error.put("error_message", e.getMessage());
-            response.setContentType(MimeTypeUtils.APPLICATION_JSON_VALUE);
-            new ObjectMapper().writeValue(response.getOutputStream(), error);
-        }
-    }
-
-    private String extractJwtToken(String authHeader) {
-        return authHeader.substring(6);
-    }
-
-    private ModuleID getIdentifier(HttpServletRequest request) {
-        VersionDetails versionDetails = versionService.getVersionDetails(VersionNumber.V_2_2_1);
-        String requestURI = request.getRequestURI();
-
-        return versionDetails.getEndpoints()
-                .stream()
-                .filter(endpoint -> endpoint.getUrl().contains(requestURI))
-                .findFirst().orElseThrow(OcpiResourceNotFoundException::new)
-                .getIdentifier();
-    }
-
-    private boolean isCredentialsRequest(HttpServletRequest request) {
-        ModuleID identifier = getIdentifier(request);
-        return ModuleID.CREDENTIALS.equals(identifier);
-    }
-
-    private boolean isVersionsRequest(HttpServletRequest request) {
-        String versionsUrl = partyConfig.getVersionsUrl();
-        String cleaned = request.getRequestURI().replace("/details", "");
-        return versionsUrl.contains(cleaned);
-    }
-
-    private boolean isAdminPanel(HttpServletRequest request) {
-        String versionUrl = "/admin-panel";
-        return request.getRequestURI().contains(versionUrl);
-    }
-}
Index: src/main/java/com/extrawest/ocpi221emsp_client/security/service/JwtService.java
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/security/service/JwtService.java b/src/main/java/com/extrawest/ocpi221emsp_client/security/service/JwtService.java
deleted file mode 100644
--- a/src/main/java/com/extrawest/ocpi221emsp_client/security/service/JwtService.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ /dev/null	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
@@ -1,79 +0,0 @@
-package com.extrawest.ocpi221emsp_client.security.service;
-
-import io.jsonwebtoken.Claims;
-import io.jsonwebtoken.JwtParser;
-import io.jsonwebtoken.Jwts;
-import io.jsonwebtoken.SignatureAlgorithm;
-import io.jsonwebtoken.io.Decoders;
-import io.jsonwebtoken.security.Keys;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.stereotype.Service;
-import org.springframework.util.StringUtils;
-
-import java.security.Key;
-import java.util.Map;
-import java.util.function.Function;
-
-@Service
-public class JwtService {
-    private static final String TYPE_CLAIM_NAME = "Type";
-//    @Value("${jwt.live.millis}")
-//    private long jwtLiveMillis;
-    private static final String TOKEN_A = "TOKEN_A";
-    private static final String TOKEN_B = "TOKEN_B";
-    @Value("${jwt.secret.key}")
-    private String secretKey;
-
-    public String extractId(String jwtToken) {
-        return extractClaim(jwtToken, Claims::getSubject);
-    }
-
-    public String extractTokenType(String jwtToken) {
-        return extractClaim(jwtToken, claims -> claims.get(TYPE_CLAIM_NAME, String.class));
-    }
-
-    public <T> T extractClaim(String jwtToken, Function<Claims, T> claimsResolver) {
-        Claims claims = extractAllClaims(jwtToken);
-        return claimsResolver.apply(claims);
-    }
-
-    public String generateTokenA(String uuid) {
-        Map<String, Object> extraClaims = Map.of(TYPE_CLAIM_NAME, TOKEN_A);
-        return generateToken(extraClaims, uuid);
-    }
-
-    public String generateTokenB(String uuid) {
-        Map<String, Object> extraClaims = Map.of(TYPE_CLAIM_NAME, TOKEN_B);
-        return generateToken(extraClaims, uuid);
-    }
-
-    public String generateToken(Map<String, Object> extraClaims, String uuid) {
-        return Jwts.builder()
-                .setClaims(extraClaims)
-                .setSubject(uuid)
-                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
-                .compact();
-    }
-
-    private Claims extractAllClaims(String jwtToken) {
-        JwtParser jwtParser = Jwts.parserBuilder()
-                .setSigningKey(getSigningKey())
-                .build();
-
-        return jwtParser.parseClaimsJws(jwtToken).getBody();
-    }
-
-    private Key getSigningKey() {
-        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
-        return Keys.hmacShaKeyFor(keyBytes);
-    }
-
-    public boolean isTokenA(String jwtToken) {
-        String tokenType = extractTokenType(jwtToken);
-        if (!StringUtils.hasText(tokenType)) {
-            return true;
-        }
-        return tokenType.equals(TOKEN_A);
-    }
-
-}
Index: src/main/java/com/extrawest/ocpi221emsp_client/security/service/TokenService.java
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/security/service/TokenService.java b/src/main/java/com/extrawest/ocpi221emsp_client/security/service/TokenService.java
deleted file mode 100644
--- a/src/main/java/com/extrawest/ocpi221emsp_client/security/service/TokenService.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ /dev/null	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
@@ -1,45 +0,0 @@
-package com.extrawest.ocpi221emsp_client.security.service;
-
-import com.extrawest.ocpi.exception.OcpiGeneralClientException;
-import com.extrawest.ocpi221emsp_client.model.RegisteredParty;
-import com.extrawest.ocpi221emsp_client.model.TokenA;
-import com.extrawest.ocpi221emsp_client.repository.TokenARepository;
-import com.extrawest.ocpi221emsp_client.service.admin.RegisteredPartyService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-
-import java.util.Optional;
-
-@Service
-@RequiredArgsConstructor
-public class TokenService {
-    private final RegisteredPartyService registeredPartyService;
-    private final TokenARepository tokenARepository;
-    private final JwtService jwtService;
-
-    public boolean isValidTokenA(String token) {
-        Optional<TokenA> tokenA = tokenARepository.findByTokenAAndInvalidated(token, false);
-        return tokenA.isPresent();
-    }
-
-    public void invalidate(String token) {
-        TokenA tokenA = tokenARepository.findById(token).orElseThrow(() -> new OcpiGeneralClientException("Not found token"));
-        tokenA.setInvalidated(true);
-        tokenARepository.save(tokenA);
-    }
-
-    public boolean isRegisteredB(String jwt) {
-        if (!registeredPartyService.exists(jwt)) {
-            throw new OcpiGeneralClientException("Invalid token B");
-        }
-        String id = jwtService.extractId(jwt);
-        RegisteredParty party = registeredPartyService.findById(id);
-
-        if (!jwt.equals(party.getTokenB())) {
-            throw new OcpiGeneralClientException("Invalid token B");
-        }
-
-        return true;
-    }
-
-}
Index: src/main/java/com/extrawest/ocpi221emsp_client/model/CdrModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/model/CdrModel.java b/src/main/java/com/extrawest/ocpi221emsp_client/model/CdrModel.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/model/CdrModel.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/model/CdrModel.java	(date 1700671903040)
@@ -5,7 +5,7 @@
 import com.extrawest.ocpi.model.dto.cdr.CdrLocation;
 import com.extrawest.ocpi.model.dto.cdr.CdrToken;
 import com.extrawest.ocpi.model.dto.cdr.SignedData;
-import com.extrawest.ocpi.model.dto.tariff.Tariff;
+import com.extrawest.ocpi.model.dto.tariff.TariffDto;
 import com.extrawest.ocpi.model.enums.AuthMethod;
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -32,7 +32,7 @@
     private CdrLocation cdrLocation;
     private String meterId;
     private String currency;
-    private List<Tariff> tariffs;
+    private List<TariffDto> tariffs;
     private List<ChargingPeriod> chargingPeriods;
     private SignedData signedData;
     private Price totalCost;
Index: src/main/java/com/extrawest/ocpi221emsp_client/mapper/CredentialsMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CredentialsMapper.java b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CredentialsMapper.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CredentialsMapper.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CredentialsMapper.java	(date 1700671903016)
@@ -1,6 +1,6 @@
 package com.extrawest.ocpi221emsp_client.mapper;
 
-import com.extrawest.ocpi.model.dto.Credentials;
+import com.extrawest.ocpi.model.dto.CredentialsDto;
 import com.extrawest.ocpi.model.dto.CredentialsRole;
 import com.extrawest.ocpi221emsp_client.model.CredentialsModel;
 import org.mapstruct.Mapper;
@@ -8,7 +8,7 @@
 
 @Mapper(componentModel = "spring", uses = CredentialsRole.class)
 public interface CredentialsMapper {
-    CredentialsModel toModel(Credentials dto);
+    CredentialsModel toModel(CredentialsDto dto);
 
-    Credentials toDto(CredentialsModel model);
+    CredentialsDto toDto(CredentialsModel model);
 }
\ No newline at end of file
Index: src/main/java/com/extrawest/ocpi221emsp_client/mapper/CdrMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CdrMapper.java b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CdrMapper.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CdrMapper.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/CdrMapper.java	(date 1700671903008)
@@ -1,20 +1,20 @@
 package com.extrawest.ocpi221emsp_client.mapper;
 
 import com.extrawest.ocpi.model.dto.ChargingPeriod;
-import com.extrawest.ocpi.model.dto.cdr.CDR;
-import com.extrawest.ocpi.model.dto.tariff.Tariff;
+import com.extrawest.ocpi.model.dto.cdr.CDRDto;
+import com.extrawest.ocpi.model.dto.tariff.TariffDto;
 import com.extrawest.ocpi221emsp_client.model.CdrModel;
 import org.mapstruct.Mapper;
 
 import java.util.List;
 
-@Mapper(componentModel = "spring", uses = {Tariff.class, ChargingPeriod.class})
+@Mapper(componentModel = "spring", uses = {TariffDto.class, ChargingPeriod.class})
 public interface CdrMapper {
-    CdrModel toModel(CDR dto);
+    CdrModel toModel(CDRDto dto);
 
-    CDR toDto(CdrModel model);
+    CDRDto toDto(CdrModel model);
 
-    List<CDR> toListDto(List<CdrModel> models);
+    List<CDRDto> toListDto(List<CdrModel> models);
 
-    List<CdrModel> toListModel(List<CDR> models);
+    List<CdrModel> toListModel(List<CDRDto> models);
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/pom.xml	(date 1700671947664)
@@ -5,12 +5,12 @@
 
 	<groupId>com.extrawest</groupId>
 	<artifactId>Extrawest-OCPI-2.2.1-EMSP-Client</artifactId>
-	<version>2023.8.28</version>
+	<version>2023.11.21</version>
 
 	<parent>
 		<groupId>org.springframework.boot</groupId>
 		<artifactId>spring-boot-starter-parent</artifactId>
-		<version>3.0.6</version>
+		<version>3.1.1</version>
 		<relativePath/> <!-- lookup parent from repository -->
 	</parent>
 
@@ -31,7 +31,7 @@
 		<dependency>
 			<groupId>com.extrawest</groupId>
 			<artifactId>Extrawest-OCPI-2.2.1-EMSP-Server</artifactId>
-			<version>2023.8.29</version>
+			<version>2023.11.21</version>
 		</dependency>
 		<dependency>
 			<groupId>org.mapstruct</groupId>
@@ -48,32 +48,6 @@
 			<artifactId>validation-api</artifactId>
 			<version>2.0.1.Final</version>
 		</dependency>
-		<dependency>
-			<groupId>org.springframework.boot</groupId>
-			<artifactId>spring-boot-starter-security</artifactId>
-		</dependency>
-		<dependency>
-			<groupId>io.jsonwebtoken</groupId>
-			<artifactId>jjwt-api</artifactId>
-			<version>${jjwt.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>io.jsonwebtoken</groupId>
-			<artifactId>jjwt-impl</artifactId>
-			<version>${jjwt.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>io.jsonwebtoken</groupId>
-			<artifactId>jjwt-jackson</artifactId>
-			<version>${jjwt.version}</version>
-		</dependency>
-
-		<dependency>
-			<groupId>io.rest-assured</groupId>
-			<artifactId>rest-assured</artifactId>
-			<version>5.3.1</version>
-		</dependency>
-
 
 		<!--_________________________________________________________________________________________________________________-->
 		<!-- dependencies are needed for the client being generated -->
@@ -177,14 +151,14 @@
 							<groupId>org.projectlombok</groupId>
 							<artifactId>lombok</artifactId>
 						</exclude>
-<!--						<exclude>-->
-<!--							<groupId>org.springdoc</groupId>-->
-<!--							<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>-->
-<!--						</exclude>-->
-<!--						<exclude>-->
-<!--							<groupId>org.springdoc</groupId>-->
-<!--							<artifactId>springdoc-openapi-ui</artifactId>-->
-<!--						</exclude>-->
+						<!--						<exclude>-->
+						<!--							<groupId>org.springdoc</groupId>-->
+						<!--							<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>-->
+						<!--						</exclude>-->
+						<!--						<exclude>-->
+						<!--							<groupId>org.springdoc</groupId>-->
+						<!--							<artifactId>springdoc-openapi-ui</artifactId>-->
+						<!--						</exclude>-->
 					</excludes>
 				</configuration>
 			</plugin>
@@ -294,7 +268,7 @@
 						<configuration>
 							<excludes>
 								<exclude>**/ocpi221emsp_client/*</exclude>
-<!--								<exclude>**/service/*</exclude>-->
+								<!--								<exclude>**/service/*</exclude>-->
 							</excludes>
 						</configuration>
 					</plugin>
@@ -326,7 +300,7 @@
 										<!--                                <serializableModel>true</serializableModel>-->
 										<sourceFolder>src/main/java</sourceFolder>
 										<dateLibrary>java8</dateLibrary>
-<!--										<output>${project.basedir}</output>-->
+										<!--										<output>${project.basedir}</output>-->
 									</configOptions>
 									<typeMappings>
 										<typeMapping>OffsetDateTime=java.time.LocalDateTime</typeMapping>
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/admin/RegisteredPartyServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/admin/RegisteredPartyServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/admin/RegisteredPartyServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/admin/RegisteredPartyServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/admin/RegisteredPartyServiceImpl.java	(date 1700671903070)
@@ -9,9 +9,7 @@
 import com.extrawest.ocpi221emsp_client.model.TokenADto;
 import com.extrawest.ocpi221emsp_client.repository.RegisteredPartyRepository;
 import com.extrawest.ocpi221emsp_client.repository.TokenARepository;
-import com.extrawest.ocpi221emsp_client.security.service.JwtService;
 import lombok.RequiredArgsConstructor;
-import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.stereotype.Service;
 
 import java.util.ArrayList;
@@ -24,7 +22,6 @@
 @Service
 @RequiredArgsConstructor
 public class RegisteredPartyServiceImpl implements RegisteredPartyService, ServerVersionsData {
-    private final JwtService jwtService;
     private final RegisteredPartyRepository registeredPartyRepository;
     private final TokenAMapperImpl partyConfigMapper;
     private final TokenARepository tokenARepository;
@@ -33,8 +30,7 @@
     public TokenADto generateCredentialsA() {
         TokenA model = new TokenA();
         UUID uuid = UUID.randomUUID();
-        String tokenA = jwtService.generateTokenA(uuid.toString());
-        model.setTokenA(tokenA);
+        model.setTokenA("tokenA");
 
         tokenARepository.save(model);
         return partyConfigMapper.toDto(model);
@@ -43,7 +39,7 @@
     @Override
     public RegisteredParty findById(String uuid) {
         return registeredPartyRepository.findById(uuid).orElseThrow(() ->
-                new UsernameNotFoundException(PARTY_NOT_FOUND));
+                new RuntimeException(PARTY_NOT_FOUND));
     }
 
     @Override
Index: src/main/java/com/extrawest/ocpi221emsp_client/mapper/SessionMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/SessionMapper.java b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/SessionMapper.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/SessionMapper.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/SessionMapper.java	(date 1700671903023)
@@ -1,7 +1,7 @@
 package com.extrawest.ocpi221emsp_client.mapper;
 
 import com.extrawest.ocpi.model.dto.ChargingPeriod;
-import com.extrawest.ocpi.model.dto.Session;
+import com.extrawest.ocpi.model.dto.SessionDto;
 import com.extrawest.ocpi221emsp_client.model.SessionModel;
 import org.mapstruct.Mapper;
 
@@ -9,11 +9,11 @@
 
 @Mapper(componentModel = "spring", uses = ChargingPeriod.class)
 public interface SessionMapper {
-    SessionModel toModel(Session tariffDTO);
+    SessionModel toModel(SessionDto tariffDTO);
 
-    Session toDTO(SessionModel tariff);
+    SessionDto toDTO(SessionModel tariff);
 
-    List<Session> toListDTO(List<SessionModel> tariffs);
+    List<SessionDto> toListDTO(List<SessionModel> tariffs);
 
-    List<SessionModel> toListModel(List<Session> tariffs);
+    List<SessionModel> toListModel(List<SessionDto> tariffs);
 }
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/ClientInfoServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/ClientInfoServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/ClientInfoServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/ClientInfoServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/ClientInfoServiceImpl.java	(date 1700671903074)
@@ -1,13 +1,13 @@
 package com.extrawest.ocpi221emsp_client.service;
 
-import com.extrawest.ocpi.model.dto.ClientInfo;
+import com.extrawest.ocpi.model.dto.ClientInfoDto;
 import com.extrawest.ocpi.service.ClientInfoService;
 import org.springframework.stereotype.Service;
 
 @Service
 public class ClientInfoServiceImpl implements ClientInfoService {
     @Override
-    public ClientInfo getHubClientInfo(String countryCode, String partyId) {
+    public ClientInfoDto getHubClientInfo(String countryCode, String partyId) {
         return null;
     }
 
Index: src/main/java/com/extrawest/ocpi221emsp_client/mapper/TariffDocumentMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TariffDocumentMapper.java b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TariffDocumentMapper.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TariffDocumentMapper.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TariffDocumentMapper.java	(date 1700671903027)
@@ -1,6 +1,6 @@
 package com.extrawest.ocpi221emsp_client.mapper;
 
-import com.extrawest.ocpi.model.dto.tariff.Tariff;
+import com.extrawest.ocpi.model.dto.tariff.TariffDto;
 import com.extrawest.ocpi221emsp_client.model.TariffModel;
 import org.mapstruct.Mapper;
 
@@ -8,11 +8,11 @@
 
 @Mapper(componentModel = "spring", uses = TariffElementMapper.class)
 public interface TariffDocumentMapper {
-    TariffModel toTariffDocument(Tariff tariffDTO);
+    TariffModel toTariffDocument(TariffDto tariffDTO);
 
-    Tariff toTariffDTO(TariffModel tariff);
+    TariffDto toTariffDTO(TariffModel tariff);
 
-    List<Tariff> toListTariffDTO(List<TariffModel> tariffs);
+    List<TariffDto> toListTariffDTO(List<TariffModel> tariffs);
 
-    List<TariffModel> toListTariff(List<Tariff> tariffs);
+    List<TariffModel> toListTariff(List<TariffDto> tariffs);
 }
Index: src/main/java/com/extrawest/ocpi221emsp_client/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/AdminController.java b/src/main/java/com/extrawest/ocpi221emsp_client/AdminController.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/AdminController.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/AdminController.java	(date 1700671903113)
@@ -2,6 +2,8 @@
 
 import com.extrawest.ocpi221emsp_client.model.TokenADto;
 import com.extrawest.ocpi221emsp_client.service.admin.RegisteredPartyService;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.v3.oas.annotations.Hidden;
 import lombok.RequiredArgsConstructor;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -14,6 +16,8 @@
 public class AdminController {
     private final RegisteredPartyService basicCredentialsService;
 
+    @Hidden
+    @ApiOperation(value = "This method is used to get token A", hidden = true)
     @GetMapping
     public ResponseEntity<TokenADto> getCredentialsA() {
         TokenADto credentialsA = basicCredentialsService.generateCredentialsA();
Index: src/main/java/com/extrawest/ocpi221emsp_client/mapper/TokenMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TokenMapper.java b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TokenMapper.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TokenMapper.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/mapper/TokenMapper.java	(date 1700671903034)
@@ -1,6 +1,6 @@
 package com.extrawest.ocpi221emsp_client.mapper;
 
-import com.extrawest.ocpi.model.dto.token.Token;
+import com.extrawest.ocpi.model.dto.token.TokenDto;
 import com.extrawest.ocpi221emsp_client.model.TokenModel;
 import org.mapstruct.Mapper;
 
@@ -9,11 +9,11 @@
 
 @Mapper(componentModel = "spring")
 public interface TokenMapper {
-    TokenModel toModel(Token dto);
+    TokenModel toModel(TokenDto dto);
 
-    Token toDto(TokenModel model);
+    TokenDto toDto(TokenModel model);
 
-    List<Token> toListDto(List<TokenModel> models);
+    List<TokenDto> toListDto(List<TokenModel> models);
 
-    List<TokenModel> toListModel(List<Token> models);
+    List<TokenModel> toListModel(List<TokenDto> models);
 }
\ No newline at end of file
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCredentialsServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCredentialsServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCredentialsServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCredentialsServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCredentialsServiceImpl.java	(date 1700671903083)
@@ -1,6 +1,6 @@
 package com.extrawest.ocpi221emsp_client.service;
 
-import com.extrawest.ocpi.model.dto.Credentials;
+import com.extrawest.ocpi.model.dto.CredentialsDto;
 import com.extrawest.ocpi.service.EMSPCredentialsService;
 import com.extrawest.ocpi221emsp_client.config.PartyConfig;
 import com.extrawest.ocpi221emsp_client.mapper.CredentialsMapper;
@@ -9,7 +9,6 @@
 import com.extrawest.ocpi221emsp_client.model.Role;
 import com.extrawest.ocpi221emsp_client.repository.CredentialsRepository;
 import com.extrawest.ocpi221emsp_client.repository.TokenARepository;
-import com.extrawest.ocpi221emsp_client.security.service.JwtService;
 import com.extrawest.ocpi221emsp_client.service.admin.RegisteredPartyService;
 import com.extrawest.ocpi221emsp_client.service.admin.ServerVersionsData;
 import lombok.RequiredArgsConstructor;
@@ -20,7 +19,6 @@
 @Service
 @RequiredArgsConstructor
 public class EMSPCredentialsServiceImpl implements EMSPCredentialsService {
-    private final JwtService jwtService;
     private final ServerVersionsData serverVersionsData;
     private final CredentialsRepository credentialsRepository;
     private final CredentialsMapper credentialsMapper;
@@ -30,12 +28,12 @@
     private final TokenARepository tokenARepository;
 
     @Override
-    public Credentials getCredentials() {
+    public CredentialsDto getCredentials() {
         return null;
     }
 
     @Override
-    public Credentials postCredentials(Credentials credentialsToClient) {
+    public CredentialsDto postCredentials(CredentialsDto credentialsToClient) {
         CredentialsModel model = credentialsMapper.toModel(credentialsToClient);
         credentialsRepository.save(model);
 
@@ -43,28 +41,28 @@
         //TODO:: store version and endpoints, received from client
 
         String uuid = UUID.randomUUID().toString();
-        String tokenB = jwtService.generateTokenB(uuid);
+//        String tokenB = jwtService.generateTokenB(uuid);
 
         RegisteredParty registeredParty = new RegisteredParty();
         registeredParty.setId(uuid);
-        registeredParty.setTokenB(tokenB);
+        registeredParty.setTokenB("tokenB");
         registeredParty.setRole(Role.CPO);
         registeredPartyService.save(registeredParty);
 
-        Credentials credentialsToServer = new Credentials();
+        CredentialsDto credentialsToServer = new CredentialsDto();
         credentialsToServer.setUrl(partyConfig.getVersionsUrl());
-        credentialsToServer.setToken(tokenB);
+        credentialsToServer.setToken("tokenB");
         credentialsToServer.setRoles(serverVersionsData.getVersionsRole());
         return credentialsToServer;
     }
 
     @Override
-    public void putCredentials(Credentials credentialsDTO) {
+    public void putCredentials(CredentialsDto credentialsDTO) {
 
     }
 
     @Override
-    public void deleteCredentials(Credentials credentialsDTO) {
+    public void deleteCredentials(CredentialsDto credentialsDTO) {
 
     }
 }
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTariffServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTariffServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTariffServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTariffServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTariffServiceImpl.java	(date 1700671903092)
@@ -1,7 +1,7 @@
 package com.extrawest.ocpi221emsp_client.service;
 
 import com.extrawest.ocpi.exception.OcpiResourceNotFoundException;
-import com.extrawest.ocpi.model.dto.tariff.Tariff;
+import com.extrawest.ocpi.model.dto.tariff.TariffDto;
 import com.extrawest.ocpi.service.EMSPTariffService;
 import com.extrawest.ocpi221emsp_client.mapper.TariffDocumentMapper;
 import com.extrawest.ocpi221emsp_client.model.TariffModel;
@@ -21,7 +21,7 @@
     private final TariffDocumentMapper tariffDocumentMapper;
 
     @Override
-    public Tariff getTariff(String countryCode, String partyId, String tariffId) {
+    public TariffDto getTariff(String countryCode, String partyId, String tariffId) {
         TariffModel tariffDocument = tariffRepository.findByIdAndCountryCodeAndPartyId(tariffId, countryCode, partyId)
                 .orElseThrow(() -> new OcpiResourceNotFoundException(String.format("Tariff %s for party %s, operates in %s, was not found",
                         tariffId, partyId, countryCode)));
@@ -30,7 +30,7 @@
     }
 
     @Override
-    public Tariff saveTariff(Tariff tariffDTO, String countryCode, String partyId, String tariffId) {
+    public TariffDto saveTariff(TariffDto tariffDTO, String countryCode, String partyId, String tariffId) {
         TariffModel tariffDocument = tariffDocumentMapper.toTariffDocument(tariffDTO);
         TariffModel saved = tariffRepository.save(tariffDocument);
         return tariffDocumentMapper.toTariffDTO(saved);
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/HubClientInfoServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/HubClientInfoServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/HubClientInfoServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/HubClientInfoServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/HubClientInfoServiceImpl.java	(date 1700671903109)
@@ -1,6 +1,6 @@
 package com.extrawest.ocpi221emsp_client.service;
 
-import com.extrawest.ocpi.model.dto.ClientInfo;
+import com.extrawest.ocpi.model.dto.ClientInfoDto;
 import com.extrawest.ocpi.service.HubClientInfoService;
 import org.springframework.stereotype.Service;
 
@@ -10,7 +10,7 @@
 @Service
 public class HubClientInfoServiceImpl implements HubClientInfoService {
     @Override
-    public List<ClientInfo> getClientInfoList(LocalDateTime dateFrom, LocalDateTime dateTo, Integer offset, Integer limit) {
+    public List<ClientInfoDto> getClientInfoList(LocalDateTime dateFrom, LocalDateTime dateTo, Integer offset, Integer limit) {
         return null;
     }
 }
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPSessionsServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPSessionsServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPSessionsServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPSessionsServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPSessionsServiceImpl.java	(date 1700672033215)
@@ -1,7 +1,7 @@
 package com.extrawest.ocpi221emsp_client.service;
 
 import com.extrawest.ocpi.exception.OcpiResourceNotFoundException;
-import com.extrawest.ocpi.model.dto.Session;
+import com.extrawest.ocpi.model.dto.SessionDto;
 import com.extrawest.ocpi.service.EMSPSessionsService;
 import com.extrawest.ocpi221emsp_client.mapper.SessionMapper;
 import com.extrawest.ocpi221emsp_client.model.SessionModel;
@@ -19,7 +19,7 @@
     private final SessionMapper sessionMapper;
 
     @Override
-    public Session getSession(String countryCode, String partyId, String sessionId) {
+    public SessionDto getSession(String countryCode, String partyId, String sessionId) {
         SessionModel session = sessionRepository.findByIdAndCountryCodeAndPartyId(sessionId, countryCode, partyId)
                 .orElseThrow(() -> new OcpiResourceNotFoundException(String.format("Session %s for party %s, operates in %s, was not found",
                         sessionId, partyId, countryCode)));
@@ -28,14 +28,14 @@
     }
 
     @Override
-    public Session putSession(Session sessionDTO, String countryCode, String partyId, String sessionId) {
+    public SessionDto putSession(SessionDto sessionDTO, String countryCode, String partyId, String sessionId) {
         SessionModel tariffDocument = sessionMapper.toModel(sessionDTO);
         SessionModel saved = sessionRepository.save(tariffDocument);
         return sessionMapper.toDTO(saved);
     }
 
     @Override
-    public void patchSession(Session sessionDTO, String countryCode, String partyId, String sessionId) {
-
+    public SessionDto patchSession(SessionDto sessionDTO, String countryCode, String partyId, String sessionId) {
+        return null;
     }
 }
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTokenServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTokenServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTokenServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTokenServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPTokenServiceImpl.java	(date 1700671903096)
@@ -2,9 +2,9 @@
 
 import com.extrawest.ocpi.exception.NotEnoughInformationException;
 import com.extrawest.ocpi.exception.OcpiUnknownTokenException;
-import com.extrawest.ocpi.model.dto.AuthorizationInfo;
-import com.extrawest.ocpi.model.dto.LocationReferences;
-import com.extrawest.ocpi.model.dto.token.Token;
+import com.extrawest.ocpi.model.dto.AuthorizationInfoDto;
+import com.extrawest.ocpi.model.dto.LocationReferencesDto;
+import com.extrawest.ocpi.model.dto.token.TokenDto;
 import com.extrawest.ocpi.model.enums.AllowedType;
 import com.extrawest.ocpi.model.enums.TokenType;
 import com.extrawest.ocpi.service.EMSPTokenService;
@@ -34,7 +34,7 @@
     private final MongoTemplate mongoTemplate;
 
     @Override
-    public List<Token> getToken(LocalDateTime dateFrom, LocalDateTime dateTo, Integer offset, Integer limit) {
+    public List<TokenDto> getToken(LocalDateTime dateFrom, LocalDateTime dateTo, Integer offset, Integer limit) {
         Query query = new Query();
 
         Criteria criteria = new Criteria();
@@ -75,7 +75,7 @@
     }
 
     @Override
-    public AuthorizationInfo postToken(String tokenUid, String tokenType, LocationReferences locationReferences) {
+    public AuthorizationInfoDto postToken(String tokenUid, String tokenType, LocationReferencesDto locationReferences) {
         if ((TokenType.RFID.value().equals(tokenType) || Strings.isBlank(tokenType)) && locationReferences == null) {
             throw new NotEnoughInformationException("To authorize RFID token please provide Location References");
         }
@@ -99,8 +99,8 @@
         }
 
         //TODO:: implement authorization logic
-        AuthorizationInfo authorizationInfo = new AuthorizationInfo();
-        Token tokenDTO = tokenMapper.toDto(tokenModels);
+        AuthorizationInfoDto authorizationInfo = new AuthorizationInfoDto();
+        TokenDto tokenDTO = tokenMapper.toDto(tokenModels);
         authorizationInfo.setToken(tokenDTO);
         if (locationReferences != null) {
             authorizationInfo.setLocation(locationReferences);
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/README.md	(date 1700671903128)
@@ -12,7 +12,7 @@
 --invoker-package com.extrawest.ocpi.emsp.client.invoker \
 --group-id com.extrawest \
 --artifact-id Extrawest-OCPI-2.2.1-EMSP-Client \
---artifact-version 2023.8.28 \
+--artifact-version 2023.11.21 \
 --additional-properties=useTags=true \
 -g java \
 -p java11=true \
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCdrServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCdrServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCdrServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCdrServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPCdrServiceImpl.java	(date 1700671903078)
@@ -2,7 +2,7 @@
 
 import com.extrawest.ocpi.exception.OcpiGeneralClientException;
 import com.extrawest.ocpi.exception.OcpiResourceNotFoundException;
-import com.extrawest.ocpi.model.dto.cdr.CDR;
+import com.extrawest.ocpi.model.dto.cdr.CDRDto;
 import com.extrawest.ocpi.service.EMSPCdrService;
 import com.extrawest.ocpi221emsp_client.mapper.CdrMapper;
 import com.extrawest.ocpi221emsp_client.model.CdrModel;
@@ -22,16 +22,16 @@
     private final CdrMapper cdrMapper;
 
     @Override
-    public CDR getCdr(String id) {
+    public CDRDto getCdr(String id) {
         CdrModel cdrModel = cdrRepository.findById(id)
                 .orElseThrow(() ->
                         new OcpiResourceNotFoundException(String.format("Cdr for url %s, was not found", id)));
-        CDR cdrDTO = cdrMapper.toDto(cdrModel);
+        CDRDto cdrDTO = cdrMapper.toDto(cdrModel);
         return cdrDTO;
     }
 
     @Override
-    public String postCdr(CDR cdrDTO) {
+    public String postCdr(CDRDto cdrDTO) {
         try {
             getCdr(cdrDTO.getId());
         } catch (OcpiResourceNotFoundException ex) {
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPLocationServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPLocationServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPLocationServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPLocationServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPLocationServiceImpl.java	(date 1700672033210)
@@ -69,7 +69,17 @@
     }
 
     @Override
-    public LocationData patchLocation(Location locationDTO, String countryCode, String partyId, String locationId, String evseUid, String connectorId) {
+    public Location patchLocation(Location locationDTO, String countryCode, String partyId, String locationId) {
+        return null;
+    }
+
+    @Override
+    public EVSE patchEvse(EVSE evse, String countryCode, String partyId, String locationId, String evseUid) {
+        return null;
+    }
+
+    @Override
+    public Connector patchConnector(Connector connector, String countryCode, String partyId, String locationId, String evseUid, String connectorId) {
         return null;
     }
 }
Index: src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPVersionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPVersionServiceImpl.java b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPVersionServiceImpl.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPVersionServiceImpl.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/service/EMSPVersionServiceImpl.java	(date 1700671903103)
@@ -1,8 +1,8 @@
 package com.extrawest.ocpi221emsp_client.service;
 
 import com.extrawest.ocpi.model.dto.Endpoint;
-import com.extrawest.ocpi.model.dto.Version;
-import com.extrawest.ocpi.model.dto.VersionDetails;
+import com.extrawest.ocpi.model.dto.VersionDetailsDto;
+import com.extrawest.ocpi.model.dto.VersionDto;
 import com.extrawest.ocpi.model.enums.InterfaceRole;
 import com.extrawest.ocpi.model.enums.ModuleID;
 import com.extrawest.ocpi.model.enums.VersionNumber;
@@ -20,16 +20,16 @@
 public class EMSPVersionServiceImpl implements EMSPVersionService {
 
     @Override
-    public List<Version> getVersions() {
+    public List<VersionDto> getVersions() {
         String uri = getBaseUrl();
 
-        List<Version> versions = new ArrayList<>();
+        List<VersionDto> versions = new ArrayList<>();
 
-        Version version_2_2_1 = new Version();
+        VersionDto version_2_2_1 = new VersionDto();
         version_2_2_1.setVersion(VersionNumber.V_2_2_1);
         version_2_2_1.setUrl(uri + "/emsp/api/versions/details?version=2.2.1");
 
-        Version version_2_1 = new Version();
+        VersionDto version_2_1 = new VersionDto();
         version_2_1.setVersion(VersionNumber.V_2_1);
         version_2_1.setUrl(uri + "/emsp/api/versions/details?version=2.1");
 
@@ -39,8 +39,8 @@
     }
 
     @Override
-    public VersionDetails getVersionDetails(VersionNumber version) {
-        VersionDetails versionDetails = new VersionDetails();
+    public VersionDetailsDto getVersionDetails(VersionNumber version) {
+        VersionDetailsDto versionDetails = new VersionDetailsDto();
         versionDetails.setVersion(VersionNumber.V_2_2_1);
 
         List<Endpoint> endpoints = new ArrayList<>();
Index: src/main/java/com/extrawest/ocpi221emsp_client/model/RegisteredParty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/model/RegisteredParty.java b/src/main/java/com/extrawest/ocpi221emsp_client/model/RegisteredParty.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/model/RegisteredParty.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/model/RegisteredParty.java	(date 1700671903045)
@@ -3,53 +3,15 @@
 import lombok.Data;
 import org.springframework.data.annotation.Id;
 import org.springframework.data.mongodb.core.mapping.Document;
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.core.userdetails.UserDetails;
 
-import java.util.Collection;
 
 @Data
 @Document(collection = "registered-parties")
-public class RegisteredParty implements UserDetails {
+public class RegisteredParty {
     @Id
     private String id;
 
     private String tokenB;
 
     private Role role;
-
-    @Override
-    public Collection<? extends GrantedAuthority> getAuthorities() {
-        return role.getAuthorities();
-    }
-
-    @Override
-    public String getPassword() {
-        return null;
-    }
-
-    @Override
-    public String getUsername() {
-        return String.valueOf(id);
-    }
-
-    @Override
-    public boolean isAccountNonExpired() {
-        return true;
-    }
-
-    @Override
-    public boolean isAccountNonLocked() {
-        return true;
-    }
-
-    @Override
-    public boolean isCredentialsNonExpired() {
-        return true;
-    }
-
-    @Override
-    public boolean isEnabled() {
-        return true;
-    }
 }
Index: src/main/java/com/extrawest/ocpi221emsp_client/model/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/extrawest/ocpi221emsp_client/model/Role.java b/src/main/java/com/extrawest/ocpi221emsp_client/model/Role.java
--- a/src/main/java/com/extrawest/ocpi221emsp_client/model/Role.java	(revision 4ab6e92212b4b2bf27637d2645a754d842844fb2)
+++ b/src/main/java/com/extrawest/ocpi221emsp_client/model/Role.java	(date 1700671903051)
@@ -2,11 +2,8 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import org.springframework.security.core.authority.SimpleGrantedAuthority;
 
-import java.util.List;
 import java.util.Set;
-import java.util.stream.Collectors;
 
 import static com.extrawest.ocpi221emsp_client.model.Permission.*;
 
@@ -47,13 +44,4 @@
 
     private final Set<Permission> permissions;
 
-    public List<SimpleGrantedAuthority> getAuthorities() {
-        var authorities = getPermissions()
-                .stream()
-                .map(permission -> new SimpleGrantedAuthority(permission.getPermission()))
-                .collect(Collectors.toList());
-        authorities.add(new SimpleGrantedAuthority("ROLE_" + this.name()));
-        return authorities;
-    }
-
 }
\ No newline at end of file
