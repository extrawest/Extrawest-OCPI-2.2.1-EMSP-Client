/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.extrawest.ocpi.emsp.client.model;

import com.fasterxml.jackson.annotation.*;

import java.util.Objects;

/**
 * CommandResult
 */
@JsonPropertyOrder({
        CommandResult.JSON_PROPERTY_RESULT,
        CommandResult.JSON_PROPERTY_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-22T18:56:56.429779+02:00[Europe/Kiev]")
public class CommandResult {
    public static final String JSON_PROPERTY_RESULT = "result";
    public static final String JSON_PROPERTY_MESSAGE = "message";
    private ResultEnum result;
    private DisplayText message;
    public CommandResult() {
    }

    public CommandResult result(ResultEnum result) {

        this.result = result;
        return this;
    }

    /**
     * Get result
     *
     * @return result
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_RESULT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ResultEnum getResult() {
        return result;
    }

    @JsonProperty(JSON_PROPERTY_RESULT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setResult(ResultEnum result) {
        this.result = result;
    }

    public CommandResult message(DisplayText message) {

        this.message = message;
        return this;
    }

    /**
     * Get message
     *
     * @return message
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DisplayText getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object o) {
      if (this == o) {
          return true;
      }
      if (o == null || getClass() != o.getClass()) {
          return false;
      }
      CommandResult commandResult = (CommandResult) o;
      return Objects.equals(this.result, commandResult.result) &&
              Objects.equals(this.message, commandResult.message);
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(DisplayText message) {
    this.message = message;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
      sb.append("class CommandResult {\n");
      sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, message);
  }

    /**
     * Gets or Sets result
     */
    public enum ResultEnum {
        ACCEPTED("ACCEPTED"),

        CANCELED_RESERVATION("CANCELED_RESERVATION"),

        EVSE_OCCUPIED("EVSE_OCCUPIED"),

        EVSE_INOPERATIVE("EVSE_INOPERATIVE"),

        FAILED("FAILED"),

        NOT_SUPPORTED("NOT_SUPPORTED"),

        REJECTED("REJECTED"),

        TIMEOUT("TIMEOUT"),

        UNKNOWN_RESERVATION("UNKNOWN_RESERVATION");

        private String value;

        ResultEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static ResultEnum fromValue(String value) {
            for (ResultEnum b : ResultEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }
    }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

